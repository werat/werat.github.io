<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lldb on werat.dev</title><link>https://werat.dev/tags/lldb/</link><description>Recent content in lldb on werat.dev</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 26 Oct 2022 15:20:00 +0100</lastBuildDate><atom:link href="https://werat.dev/tags/lldb/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging Wine with LLDB and VSCode</title><link>https://werat.dev/blog/debugging-wine-with-lldb-and-vscode/</link><pubDate>Wed, 26 Oct 2022 15:20:00 +0100</pubDate><guid>https://werat.dev/blog/debugging-wine-with-lldb-and-vscode/</guid><description>In my previous post about Wine I mentioned working on a debugger that is capable of debugging both the Wine layer and the Windows application running with it. Time to share some details!
Debugging Wine applications is tricky and there are different ways to do it. In many cases you don&amp;rsquo;t have access to the application source code and/or debug symbols and Wine itself is often built with aggressive optimizations.</description></item><item><title>Blazing fast expression evaluation for C++ in LLDB</title><link>https://werat.dev/blog/blazing-fast-expression-evaluation-for-c-in-lldb/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://werat.dev/blog/blazing-fast-expression-evaluation-for-c-in-lldb/</guid><description>Expression evaluation is an integral part of any modern debugger. It allows the user to inspect the program state using the familiar syntax of the target language, as well as perform modifications to the target process (if the side-effects are allowed). If you have ever used command-line debuggers, you&amp;rsquo;re probably familiar with it via commands like print/call in GDB or expr/p in LLDB. It is also used extensively by the IDEs to support typical UI workflows: Immediate Window, Watch Window, hovering over a variable, custom data visualizers (see NatVis), etc.</description></item><item><title>Debugging LLDB with source stepping</title><link>https://werat.dev/blog/debugging-lldb-with-source-stepping/</link><pubDate>Sun, 11 Oct 2020 18:35:00 +0100</pubDate><guid>https://werat.dev/blog/debugging-lldb-with-source-stepping/</guid><description>Sometimes you want to (or need to) debug a program that you didn&amp;rsquo;t build yourself and you don&amp;rsquo;t even know how exactly it was built. Depending on the specifics of your setup that could mean many different things:
Built on a build farm, running on a production server/container Installed via apt or similar, running locally &amp;hellip; This post is inspired by my experience of debugging LLDB. Debugging the debugger is always interesting and tricky, even without the additional difficulties like trying to get the source stepping to work :)</description></item></channel></rss>