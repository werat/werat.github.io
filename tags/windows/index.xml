<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>windows on Reboot and Shine</title><link>https://werat.dev/tags/windows/</link><description>Recent content in windows on Reboot and Shine</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 26 Oct 2022 15:20:00 +0100</lastBuildDate><atom:link href="https://werat.dev/tags/windows/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging Wine with LLDB and VSCode</title><link>https://werat.dev/blog/debugging-wine-with-lldb-and-vscode/</link><pubDate>Wed, 26 Oct 2022 15:20:00 +0100</pubDate><guid>https://werat.dev/blog/debugging-wine-with-lldb-and-vscode/</guid><description>In my previous post about Wine I mentioned working on a debugger that is capable of debugging both the Wine layer and the Windows application running with it. Time to share some details!
Debugging Wine applications is tricky and there are different ways to do it. In many cases you don&amp;rsquo;t have access to the application source code and/or debug symbols and Wine itself is often built with aggressive optimizations.</description></item><item><title>How Wine works 101</title><link>https://werat.dev/blog/how-wine-works-101/</link><pubDate>Mon, 10 Oct 2022 21:20:00 +0100</pubDate><guid>https://werat.dev/blog/how-wine-works-101/</guid><description>Wine is a compatibility layer capable of running Windows applications on several POSIX-compliant operating systems, such as Linux, macOS, &amp;amp; BSD (https://www.winehq.org).
If you have been using Linux for some time now, chances are you’ve used Wine at some point. Maybe to run that one very important Windows program that doesn’t have a Linux version or maybe to play World of Warcraft or some other game. Fun fact, Valve&amp;rsquo;s Steam Deck uses a Wine-based solution to run games (called Proton).</description></item><item><title>How to debug deadlocks in Visual Studio</title><link>https://werat.dev/blog/how-to-debug-deadlocks-in-visual-studio/</link><pubDate>Sat, 17 Sep 2022 12:21:00 +0100</pubDate><guid>https://werat.dev/blog/how-to-debug-deadlocks-in-visual-studio/</guid><description>There has been lots of discussions recently about the usefulness of debuggers (on Twitter/Reddit and probably other platforms). Some people brag about never using/needing one and some people can&amp;rsquo;t imagine their life without stepping through the code line by line. I&amp;rsquo;m both of these people at different times, so I&amp;rsquo;m not going to judge anyone. Instead, let me share a short debugging story and you can decide for yourself :)</description></item><item><title>Why are my PCHs out of date?</title><link>https://werat.dev/blog/why-are-my-pchs-out-of-date/</link><pubDate>Sat, 04 Dec 2021 13:35:00 +0100</pubDate><guid>https://werat.dev/blog/why-are-my-pchs-out-of-date/</guid><description>Last week I got an interesting bug report from a colleague. They were minding their own business and playing with Unreal Engine 5 when suddenly a wild build error appeared and said that some precompiled headers are out of date:
fatal error: file &amp;#39;D:\toolchain\sysroot\usr\include\x86_64-linux-gnu\bits\wordsize.h&amp;#39; has been modified since the precompiled header &amp;#39;UE5\Engine\...\SharedPCH.CoreUObject.ShadowErrors.h.gch&amp;#39; was built: mtime changed Hmm, well, it looks like some source files have changed and a simple re-build would fix the issue.</description></item><item><title>Installing Visual Studio extensions from MSI</title><link>https://werat.dev/blog/installing-visual-studio-extensions-from-msi/</link><pubDate>Sat, 07 Aug 2021 09:23:00 +0100</pubDate><guid>https://werat.dev/blog/installing-visual-studio-extensions-from-msi/</guid><description>Visual Studio extensions are typically distributed via VSIX packages. Visual Studio comes with an installer vsixinstaller.exe, which handles the actuall installation process. When you download the VSIX file from the extension gallery and then double-click it or when you install the extension from Visual Studio via the &amp;ldquo;Extensions and Updates&amp;rdquo; menu the above mentioned installer is invoked and does all the work. It&amp;rsquo;s also possible to use vsixinstaller.exe directly if you need to install the extensions programmatically (e.</description></item></channel></rss>