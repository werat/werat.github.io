<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Reboot and Shine</title><link>https://werat.dev/posts/</link><description>Recent content in Posts on Reboot and Shine</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 04 Dec 2021 13:35:00 +0100</lastBuildDate><atom:link href="https://werat.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Why are my PCHs out of date?</title><link>https://werat.dev/blog/why-are-my-pchs-out-of-date/</link><pubDate>Sat, 04 Dec 2021 13:35:00 +0100</pubDate><guid>https://werat.dev/blog/why-are-my-pchs-out-of-date/</guid><description>Last week I got an interesting bug report from a colleague. They were minding their own business and playing with Unreal Engine 5 when suddenly a wild build error appeared and said that some precompiled headers are out of date:
fatal error: file &amp;#39;D:\toolchain\sysroot\usr\include\x86_64-linux-gnu\bits\wordsize.h&amp;#39; has been modified since the precompiled header &amp;#39;UE5\Engine\...\SharedPCH.CoreUObject.ShadowErrors.h.gch&amp;#39; was built: mtime changed Hmm, well, it looks like some source files have changed and a simple re-build would fix the issue.</description></item><item><title>Installing Visual Studio extensions from MSI</title><link>https://werat.dev/blog/installing-visual-studio-extensions-from-msi/</link><pubDate>Sat, 07 Aug 2021 09:23:00 +0100</pubDate><guid>https://werat.dev/blog/installing-visual-studio-extensions-from-msi/</guid><description>Visual Studio extensions are typically distributed via VSIX packages. Visual Studio comes with an installer vsixinstaller.exe, which handles the actuall installation process. When you download the VSIX file from the extension gallery and then double-click it or when you install the extension from Visual Studio via the &amp;ldquo;Extensions and Updates&amp;rdquo; menu the above mentioned installer is invoked and does all the work. It&amp;rsquo;s also possible to use vsixinstaller.exe directly if you need to install the extensions programmatically (e.</description></item><item><title>Running benchmarks for Pull Requests via GitHub Actions</title><link>https://werat.dev/blog/running-benchmarks-for-pull-requests-via-github-actions/</link><pubDate>Mon, 28 Jun 2021 13:35:00 +0100</pubDate><guid>https://werat.dev/blog/running-benchmarks-for-pull-requests-via-github-actions/</guid><description>Benchmarks are often underestimated and don&amp;rsquo;t get the same attention as tests. However &amp;ldquo;performance is a feature&amp;rdquo; and when something is not tested it might as well be just broken. If the performance is not measured/tracked regressions are inevitable.
Modern tooling makes it really easy to write benchmarks. Some languages have built-in support, for example, Rust comes with cargo bench (docs) and Go has go test -bench (docs). For C++ there is google/benchmark &amp;ndash; not as streamlined as having it built into the language infrastructure, but still definitely worth the effort.</description></item><item><title>Blazing fast expression evaluation for C++ in LLDB</title><link>https://werat.dev/blog/blazing-fast-expression-evaluation-for-c-in-lldb/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://werat.dev/blog/blazing-fast-expression-evaluation-for-c-in-lldb/</guid><description>Expression evaluation is an integral part of any modern debugger. It allows the user to inspect the program state using the familiar syntax of the target language, as well as perform modifications to the target process (if the side-effects are allowed). If you have ever used command-line debuggers, you&amp;rsquo;re probably familiar with it via commands like print/call in GDB or expr/p in LLDB. It is also used extensively by the IDEs to support typical UI workflows: Immediate Window, Watch Window, hovering over a variable, custom data visualizers (see NatVis), etc.</description></item><item><title>Debugging LLDB with source stepping</title><link>https://werat.dev/blog/debugging-lldb-with-source-stepping/</link><pubDate>Sun, 11 Oct 2020 18:35:00 +0100</pubDate><guid>https://werat.dev/blog/debugging-lldb-with-source-stepping/</guid><description>Sometimes you want to (or need to) debug a program that you didn&amp;rsquo;t build yourself and you don&amp;rsquo;t even know how exactly it was built. Depending on the specifics of your setup that could mean many different things:
Built on a build farm, running on a production server/container Installed via apt or similar, running locally &amp;hellip; This post is inspired by my experience of debugging LLDB. Debugging the debugger is always interesting and tricky, even without the additional difficulties like trying to get the source stepping to work :)</description></item><item><title>Happy ssh agent forwarding for tmux/screen</title><link>https://werat.dev/blog/happy-ssh-agent-forwarding/</link><pubDate>Sat, 04 Feb 2017 11:55:00 +0300</pubDate><guid>https://werat.dev/blog/happy-ssh-agent-forwarding/</guid><description>If you often use ssh+tmux combination and ssh keys forwarding, you&amp;rsquo;ve definitely been in an unpleasant situation:
connect to some remote machine via ssh and create a tmux session use it happily detach from tmux and disconnect from server connect again (e.g. next day) and attach to the tmux session push something to git (or connect to another server)&amp;hellip; &amp;hellip; Permission denied (publickey). Let&amp;rsquo;s discuss why this is happening. The magic behind ssh forwarding is quite simple: ssh-agent creates a socket (on linux usually something like /tmp/ssh-hRNwjA1342/agent.</description></item></channel></rss>